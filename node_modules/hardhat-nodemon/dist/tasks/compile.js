"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("hardhat/config");
const task_names_1 = require("hardhat/builtin-tasks/task-names");
const config_2 = require("../config");
const utils_1 = require("../utils");
const compile_1 = require("../utils/compile");
const listener_1 = require("../utils/listener");
const chalk_1 = __importDefault(require("chalk"));
// extension task: compile
(0, config_1.task)(task_names_1.TASK_COMPILE)
    .addFlag(config_2.command.watch, "Watch changes in contract files")
    .addOptionalParam(config_2.flag.only, "A list of contracts to watch for compilation, separated by commas (.sol files)", "")
    .addOptionalParam(config_2.flag.except, "A list of contracts to ignore while watching for compilation, separated by commas (.sol files)", "")
    .setAction(async (args, hre, runSuper) => {
    if (!args.watch) {
        if (args.only !== "" || args.except !== "") {
            console.error(chalk_1.default.red.bold("flags: only, except are only to be used along with --watch"));
            return;
        }
        await runSuper();
        return;
    }
    if (!(0, compile_1.validateArgs)(args)) {
        console.error(chalk_1.default.red.bold("Please run --"), chalk_1.default.bgYellow.black.bold("npx hardhat compile --help"));
        return;
    }
    const { compileDir, noCompile } = hre.config.compileWatch;
    if (!noCompile) {
        await runSuper();
    }
    (0, utils_1.showStatus)();
    await (0, listener_1.startListener)(compileDir, async ({ eventType, filename }) => {
        (0, utils_1.showChange)(filename, eventType);
        const shouldChange = (0, compile_1.isSpecifiedChange)(args, filename) && filename.endsWith(".sol");
        if (shouldChange) {
            await runSuper();
        }
        (0, utils_1.showStatus)(!shouldChange);
    });
});
